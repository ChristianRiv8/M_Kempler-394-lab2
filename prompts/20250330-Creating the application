Prompt:

"Create a detailed step-by-step plan to develop a Java-based AI-powered personal finance tracker application with the following features. The AI should handle the full development process, from database setup to AI integration, security, and deployment. List all the future advancements that can be made in the application.

Core Features:
AI-Driven Expense Categorization & Insights: Automatically categorize transactions based on predefined categories (e.g., groceries, entertainment) and provide spending insights.

Smart Budget Recommendations: Analyze past spending and create personalized budget plans tailored to the user’s income and financial goals.

Automated Financial Goal Tracking: Allow users to set and track progress toward financial milestones such as savings goals or debt repayment.

Forecasting & Alerts for Upcoming Bills: Predict future spending patterns, bills, and send notifications to prevent overspending.

Offline Mode: Ensure the app works offline by storing and updating user data locally with sync capabilities when online.

Biometric Security: Integrate Face ID and fingerprint authentication for secure access to the app.

Technologies / Stack:
Platform: Java with JavaFX for desktop UI, or Android for mobile development (depending on the platform chosen).

Database: SQLite for storing financial data both locally and in the cloud. Provide instructions on how to set up and use SQLite, including connections, schema, queries, and data management.

AI Integration: Use OpenAI API for chatbot interaction, AI-driven financial advice, and analysis of spending patterns. Optionally, implement local machine learning models using TensorFlow Java or DL4J for privacy-focused AI processing.

Security & Authentication: Use end-to-end encryption (AES-256) for financial data and biometric authentication via Face ID/fingerprint support.

Deployment: Guide on packaging the app for both desktop and mobile platforms (.exe, .dmg, .jar, and Google Play Store integration).

Development Steps:
Database Setup:

Step-by-step instructions for setting up a PostgreSQL database.

Design schema for user data, transaction records, budgets, financial goals, alerts, etc.

Instructions for connecting the Java application to PostgreSQL (JDBC setup).

CRUD operations (Create, Read, Update, Delete) for financial transactions and budgets.

Core Feature Implementation:

AI for expense categorization and spending analysis using transaction data.

Budgeting logic that dynamically adjusts based on spending patterns.

Financial goal tracking with visual progress indicators.

Forecasting algorithms to predict upcoming expenses and send alerts.

Offline storage and synchronization of data when the internet is available.

AI Integration:

Integrate OpenAI API to create a financial chatbot capable of answering user questions and providing financial advice.

Implement machine learning models (if necessary) to analyze spending patterns and suggest ways to save money.

Add privacy-focused local AI for on-device analysis (e.g., using TensorFlow Java or DL4J).

Security Implementation:

Implement AES-256 encryption for financial data security.

Set up biometric authentication (Face ID/fingerprint) for user login.

UI Development:

Design a user-friendly, intuitive UI using JavaFX for desktop or Android for mobile.

Ensure the UI is responsive, clean, and includes features like charts for spending, budget visualization, and goal tracking.

Deployment:

I want to be able to view the application and perform everything it has to offer. 

These are the directions i will be using Node.js, vanilla JS and SQLite
Core Requirements for Your Application: 
Full-Stack Web App: 
● Backend: Must be well-structured with a REST API (Node.js with Express 
recommended, but other stacks allowed). 
● Frontend: Use a modern UI framework (Angular, React, Svelte, or vanilla JS). 
● Database: Implement a database (PostgreSQL, MongoDB, or SQLite 
recommended). 
AI-Assisted Development Process: 
Each step must incorporate AI-powered coding techniques, including: 
● AI-Generated Initial Prototypes (using GitHub Copilot, Cursor, or other AI 
assistants) 
● Iterative AI Debugging & Optimization 
● Prompt Engineering Technique 
○ CoT: Step-by-step reasoning for architecture design 
○ Meta-Prompting: AI-generated improvements to initial design/code 
○ ToT: Generating multiple solutions and refining 
AI Development Log: 
Each team must track their AI interactions by saving and documenting prompts. Create 
a prompts/ folder (each team member can have a subfolder) in your GitHub repo using 
the following format for tracking prompts: 
● [yyyyMMdd]-[prompt-goal].txt  
Deployment Considerations: 
While full deployment (server, domain, TLS) will be part of the final project, teams 
should begin preparing for real-world implementation. 



Prompt 2: 
How can I view this application and make sure the app is working appropriately? 

Prompt 3: 
Debugging: Why do non of the buttons on the frontend work appropriately? The dahsboard seems to have all the appropriate buttons but I am unable to press them and see their specified page.

Prompt 4: I want users to be forced to login before they are able to view their specific dashboard. Once a user logs out they should be taken to the login page. 

